"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImageZoom;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const AnimatedImage = _reactNativeReanimated.default.createAnimatedComponent(_reactNative.Image);

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  content: {
    flex: 1,
    flexGrow: 1,
    position: 'relative',
    overflow: 'hidden'
  },
  loader: { ..._reactNative.StyleSheet.absoluteFillObject,
    backgroundColor: 'whitesmoke'
  }
});

function ImageZoom(_ref) {
  let {
    uri = '',
    minScale = 1,
    maxScale = 5,
    minPanPointers = 2,
    maxPanPointers = 2,
    isPanEnabled = true,
    isPinchEnabled = true,
    onLoadEnd,
    onInteractionStart,
    onInteractionEnd,
    onPinchStart,
    onPinchEnd,
    onPanStart,
    onPanEnd,
    style = {},
    containerStyle = {},
    imageContainerStyle = {},
    activityIndicatorProps = {},
    renderLoader,
    ...props
  } = _ref;
  const panRef = (0, _react.useRef)();
  const pinchRef = (0, _react.useRef)();
  const isInteracting = (0, _react.useRef)(false);
  const isPanning = (0, _react.useRef)(false);
  const isPinching = (0, _react.useRef)(false);
  const [isLoading, setIsLoading] = (0, _react.useState)(true);
  const [state, setState] = (0, _react.useState)({
    canInteract: false,
    centerX: 0,
    centerY: 0
  });
  const {
    canInteract,
    centerX,
    centerY
  } = state;
  const scale = (0, _reactNativeReanimated.useSharedValue)(1);
  const initialFocalX = (0, _reactNativeReanimated.useSharedValue)(0);
  const initialFocalY = (0, _reactNativeReanimated.useSharedValue)(0);
  const focalX = (0, _reactNativeReanimated.useSharedValue)(0);
  const focalY = (0, _reactNativeReanimated.useSharedValue)(0);
  const translateX = (0, _reactNativeReanimated.useSharedValue)(0);
  const translateY = (0, _reactNativeReanimated.useSharedValue)(0);

  const onInteractionStarted = () => {
    if (!isInteracting.current) {
      isInteracting.current = true;
      onInteractionStart === null || onInteractionStart === void 0 ? void 0 : onInteractionStart();
    }
  };

  const onInteractionEnded = () => {
    if (isInteracting.current && !isPinching.current && !isPanning.current) {
      isInteracting.current = false;
      onInteractionEnd === null || onInteractionEnd === void 0 ? void 0 : onInteractionEnd();
    }
  };

  const onPinchStarted = () => {
    onInteractionStarted();
    isPinching.current = true;
    onPinchStart === null || onPinchStart === void 0 ? void 0 : onPinchStart();
  };

  const onPinchEnded = () => {
    isPinching.current = false;
    onPinchEnd === null || onPinchEnd === void 0 ? void 0 : onPinchEnd();
    onInteractionEnded();
  };

  const onPanStarted = () => {
    onInteractionStarted();
    isPanning.current = true;
    onPanStart === null || onPanStart === void 0 ? void 0 : onPanStart();
  };

  const onPanEnded = () => {
    isPanning.current = false;
    onPanEnd === null || onPanEnd === void 0 ? void 0 : onPanEnd();
    onInteractionEnded();
  };

  const panHandler = (0, _reactNativeReanimated.useAnimatedGestureHandler)({
    onActive: event => {
      translateX.value = event.translationX;
      translateY.value = event.translationY;
    },
    onFinish: () => {
      translateX.value = (0, _reactNativeReanimated.withTiming)(0);
      translateY.value = (0, _reactNativeReanimated.withTiming)(0);
    }
  });
  const pinchHandler = (0, _reactNativeReanimated.useAnimatedGestureHandler)({
    onStart: event => {
      initialFocalX.value = event.focalX;
      initialFocalY.value = event.focalY;
    },
    onActive: event => {
      // onStart: focalX & focalY result both to 0 on Android
      if (initialFocalX.value === 0 && initialFocalY.value === 0) {
        initialFocalX.value = event.focalX;
        initialFocalY.value = event.focalY;
      }

      scale.value = (0, _helpers.clamp)(event.scale, minScale, maxScale);
      focalX.value = (centerX - initialFocalX.value) * (scale.value - 1);
      focalY.value = (centerY - initialFocalY.value) * (scale.value - 1);
    },
    onFinish: () => {
      scale.value = (0, _reactNativeReanimated.withTiming)(1);
      focalX.value = (0, _reactNativeReanimated.withTiming)(0);
      focalY.value = (0, _reactNativeReanimated.withTiming)(0);
      initialFocalX.value = 0;
      initialFocalY.value = 0;
    }
  });
  const animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
    transform: [{
      translateX: translateX.value
    }, {
      translateY: translateY.value
    }, {
      translateX: focalX.value
    }, {
      translateY: focalY.value
    }, {
      scale: scale.value
    }]
  }));

  const onLayout = _ref2 => {
    let {
      nativeEvent: {
        layout: {
          x,
          y,
          width,
          height
        }
      }
    } = _ref2;
    setState(current => ({ ...current,
      canInteract: true,
      centerX: x + width / 2,
      centerY: y + height / 2
    }));
  };

  const onImageLoadEnd = () => {
    onLoadEnd === null || onLoadEnd === void 0 ? void 0 : onLoadEnd();
    setIsLoading(false);
  };

  return /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.PinchGestureHandler, {
    ref: pinchRef,
    simultaneousHandlers: [panRef],
    onGestureEvent: pinchHandler,
    onActivated: onPinchStarted,
    onCancelled: onPinchEnded,
    onEnded: onPinchEnded,
    onFailed: onPinchEnded,
    enabled: isPinchEnabled && canInteract
  }, /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [styles.container, containerStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, {
    ref: panRef,
    simultaneousHandlers: [pinchRef],
    onGestureEvent: panHandler,
    onActivated: onPanStarted,
    onCancelled: onPanEnded,
    onEnded: onPanEnded,
    onFailed: onPanEnded,
    minPointers: minPanPointers,
    maxPointers: maxPanPointers,
    enabled: isPanEnabled && canInteract
  }, /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    onLayout: onLayout,
    style: [styles.content, imageContainerStyle]
  }, /*#__PURE__*/_react.default.createElement(AnimatedImage, _extends({
    style: [styles.container, style, animatedStyle],
    source: {
      uri
    },
    resizeMode: "contain",
    onLoadEnd: onImageLoadEnd
  }, props)), isLoading && (renderLoader ? renderLoader() : /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, _extends({
    size: "small",
    style: styles.loader,
    color: "dimgrey"
  }, activityIndicatorProps)))))));
}
//# sourceMappingURL=ImageZoom.js.map